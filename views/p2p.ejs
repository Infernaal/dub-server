<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Dubadu P2P Orders</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    table {
      border-collapse: collapse;
      width: 50%;
      margin-top: 20px;
    }
    th, td {
      text-align: left;
      padding: 8px;
      border: 1px solid #ccc;
    }
    th {
      background-color: #f2f2f2;
    }
    #status {
      margin-top: 10px;
      font-weight: bold;
    }
    .tab-buttons {
      margin-bottom: 20px;
    }
    .tab-buttons button {
      padding: 10px 20px;
      margin-right: 10px;
      cursor: pointer;
      font-size: 16px;
    }
    .hidden {
      display: none;
    }
    .balance-info {
      margin-bottom: 20px;
    }
    /* –ë–ª–æ–∫ –ø–æ–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ / Best Match */
    #find-orders-block {
      margin: 20px 0;
      padding: 10px;
      border: 1px solid #ccc;
      width: 50%;
    }
    #find-orders-block input[type="number"] {
      padding: 5px;
      margin-right: 10px;
      width: 150px;
    }
    #find-orders-block button {
      padding: 5px 15px;
      cursor: pointer;
      font-size: 16px;
    }
    /* –ë–ª–æ–∫ ¬´Best Match¬ª */
    #best-match-container {
      margin-top: 15px;
      background-color: #2c2c2c; /* –¢—ë–º–Ω—ã–π —Ñ–æ–Ω */
      color: #fff;              /* –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç */
      padding: 15px;
      border-radius: 8px;
      width: 50%;
    }
    #best-match-container .header {
      font-weight: bold;
      font-size: 1.1em;
      margin-bottom: 5px;
    }
    .order-list {
      margin-top: 10px;
      padding: 10px 0;
      border-top: 1px solid #444;
      border-bottom: 1px solid #444;
    }
    .order-item {
      display: flex;
      justify-content: space-between;
      margin: 5px 0;
    }
    .order-item .trader {
      font-weight: bold;
      margin-right: 10px;
    }
    .order-item .price {
      color: #09d3ac;
    }
    /* –ö–Ω–æ–ø–∫–∞ Buy Forevers –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–∞–º–∏ */
    #buy-forevers-btn {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
    }
    /* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */
    .modal {
      display: none; /* —Å–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      padding-top: 60px;
      text-align: center;
    }
    .modal-content {
      background-color: #fff;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #ccc;
      width: 40%;
    }
    .modal-header {
      font-size: 18px;
      font-weight: bold;
    }
    .modal-footer {
      margin-top: 20px;
    }
    /* –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
    .auth-form {
      max-width: 300px;
      margin: 0 auto;
      text-align: center;
    }
    .auth-form input {
      width: 100%;
      padding: 10px;
      margin: 5px 0;
    }
    /* –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫) */
    .notification-bell {
      position: fixed;
      top: 20px;
      right: 20px;
      cursor: pointer;
      font-size: 24px;
    }
    .notification-bell .badge {
      position: absolute;
      top: -5px;
      right: -5px;
      background: red;
      color: white;
      border-radius: 50%;
      padding: 2px 6px;
      font-size: 12px;
      display: none;
    }
    /* –°—Ç–∏–ª–∏ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
    .notification-popup {
      position: fixed;
      top: 60px;
      right: 20px;
      width: 300px;
      background: #fff;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
      padding: 10px;
      z-index: 1000;
      max-height: 300px;
      overflow-y: auto;
    }
    .notification-popup.hidden {
      display: none;
    }
    .notification-popup h4 {
      margin: 0 0 10px;
      font-size: 16px;
    }
    .notification-popup ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .notification-popup li {
      border-bottom: 1px solid #eee;
      padding: 5px 0;
      font-size: 14px;
    }
    .notification-popup button {
      margin-top: 10px;
      padding: 5px 10px;
      font-size: 14px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>–°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ (P2P)</h1>
  <div id="status">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO...</div>
  
  <!-- –ó–Ω–∞—á–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫) —Å –±–µ–π–¥–∂–∏–∫–æ–º -->
  <div class="notification-bell" id="notificationBell">
    üîî
    <span class="badge" id="notificationBadge">0</span>
  </div>
  
  <!-- –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ -->
  <div id="notificationPopup" class="notification-popup hidden">
    <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
    <ul id="notificationList"></ul>
    <button id="clearNotifications">–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</button>
  </div>

  <!-- –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -->
  <div id="auth-section">
    <h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
    <div class="auth-form">
      <input type="email" id="email" placeholder="Email">
      <input type="fullname" id="fullname" placeholder="Full Name">
      <input type="password" id="password" placeholder="–ü–∞—Ä–æ–ª—å">
      <div style="margin-top: 10px;">
        <button onclick="login()">–í–æ–π—Ç–∏</button>
        <button onclick="register()">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
      </div>
    </div>
  </div>

  <!-- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -->
  <div id="orders-section" class="hidden">
    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
    <div class="balance-info">
      <p>Forevers: <span id="forevers-balance">0</span></p>
      <p>Amount: <span id="amount-balance">0</span></p>
    </div>

    <!-- –ë–ª–æ–∫ –ø–æ–∏—Å–∫–∞ (Best Match) -->
    <div id="find-orders-block">
      <h2>Best Match</h2>
      <input type="number" id="find-amount" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ forevers" min="1" step="1">
      <button id="find-orders-btn">–ü–æ–∏—Å–∫</button>
      <button id="reset-orders-btn">Reset</button>
      <!-- –ë–ª–æ–∫ Best Match –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç -->
      <div id="best-match-container" class="hidden"></div>
    </div>

    <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ -->
    <button id="create-order-btn">–°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä</button>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ -->
    <div id="create-order-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">–°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä</div>
        <label>–í–∞—à Email (trader_name):</label>
        <input type="text" id="trader-name">
        <label>–¢–∏–ø –æ—Ä–¥–µ—Ä–∞:</label>
        <select id="order-type">
          <option value="buy">–ü–æ–∫—É–ø–∫–∞</option>
          <option value="sell">–ü—Ä–æ–¥–∞–∂–∞</option>
        </select>
        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Forevers:</label>
        <input type="number" id="order-quantity" min="1" step="1">
        <label>–¶–µ–Ω–∞:</label>
        <input type="number" id="order-price" min="0.01" step="0.01">
        <div class="modal-footer">
          <button id="submit-order">–í—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä</button>
          <button id="close-create-modal">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    </div>

    <!-- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É Buy –∏ Sell -->
    <div class="tab-buttons">
      <button id="buy-tab-btn">Buy</button>
      <button id="sell-tab-btn">Sell</button>
    </div>
    <button id="cancel-order-btn">–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä</button>

    <!-- –¢–∞–±–ª–∏—Ü–∞ –æ—Ä–¥–µ—Ä–æ–≤ Buy -->
    <table id="buy-table">
      <thead>
        <tr>
          <th>Trader</th>
          <th>Price</th>
          <th>Amount</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="buy-table-body"></tbody>
    </table>

    <!-- –¢–∞–±–ª–∏—Ü–∞ –æ—Ä–¥–µ—Ä–æ–≤ Sell -->
    <table id="sell-table" class="hidden">
      <thead>
        <tr>
          <th>Trader</th>
          <th>Price</th>
          <th>Amount</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="sell-table-body"></tbody>
    </table>

    <!-- –ö–Ω–æ–ø–∫–∞ Buy Forevers –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–∞–º–∏ -->
    <button id="buy-forevers-btn">Buy Forevers</button>
  </div>

  <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Buy Forevers) -->
  <div id="buy-forevers-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">Buy Forevers - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</div>
      <div id="buy-forevers-content">
        <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ -->
      </div>
      <div class="modal-footer">
        <button id="confirm-buy-forevers">Buy</button>
        <button id="close-buy-forevers-modal">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  </div>

  <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É) -->
  <div id="order-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">–û—Ñ–æ—Ä–º–∏—Ç—å –æ—Ä–¥–µ—Ä</div>
      <p>–¶–µ–Ω–∞: <span id="modal-price">0</span></p>
      <p>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <span id="modal-amount">0</span></p>
      <p>–í–∞—à –±–∞–ª–∞–Ω—Å: <span id="modal-balance">0</span> forevers</p>
      <div>
        <label for="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</label>
        <input type="number" id="quantity" min="1" step="1" value="1">
      </div>
      <div class="modal-footer">
        <button id="confirm-order">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        <button id="close-modal">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  </div>

  <!-- Socket.IO –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script>
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let socket = null;
    let currentTab = "buy"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª–∞–¥–∫–∞ Buy
    let isBestMatchActive = false; // –§–ª–∞–≥ –¥–ª—è Best Match
    let bestMatchResponse = null;  // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Best Match
    let notificationCount = 0;     // –°—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let notifications = [];        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Socket.IO –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    function connectSocket() {
      const storedUserId = localStorage.getItem("user_id") || "";
      socket = io("http://localhost:5000", { query: "user_id=" + storedUserId });

      socket.on('connect', function() {
        document.getElementById("status").textContent = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!";
        loadOfflineNotifications();
      });

      socket.on('disconnect', function() {
        document.getElementById("status").textContent = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ!";
      });

      socket.on('notification', function(data) {
        console.log("–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", data);
        notifications.push(data.message);
        notificationCount = notifications.length;
        updateNotificationBadge();
      });

      socket.on("orders_update", function(data) {
        console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:", data);
        updateOrderTable(data.orders);
        if (isBestMatchActive) {
          findBestMatchOrders();
        }
      });
    }

    function updateNotificationBadge() {
      const badge = document.getElementById("notificationBadge");
      if (notificationCount > 0) {
        badge.style.display = "inline-block";
        badge.textContent = notificationCount;
      } else {
        badge.style.display = "none";
      }
    }

    function loadOfflineNotifications() {
      const userId = localStorage.getItem("user_id");
      if (!userId) return;
      fetch("http://localhost:5000/api/get_notifications?user_id=" + userId)
        .then(response => response.json())
        .then(data => {
          if (data.status === "ok" && data.notifications.length > 0) {
            data.notifications.forEach(notif => {
              notifications.push(notif.message);
            });
            notificationCount = notifications.length;
            updateNotificationBadge();
          }
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error));
    }

    function showNotificationPopup() {
      const popup = document.getElementById("notificationPopup");
      const listElem = document.getElementById("notificationList");
      listElem.innerHTML = "";
      notifications.forEach(msg => {
        const li = document.createElement("li");
        li.textContent = msg;
        listElem.appendChild(li);
      });
      popup.classList.remove("hidden");
    }

    document.getElementById("notificationBell").addEventListener("click", function() {
      showNotificationPopup();
    });

    document.getElementById("clearNotifications").addEventListener("click", function() {
      const userId = localStorage.getItem("user_id");
      fetch("http://localhost:5000/api/mark_notifications_read", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user_id: userId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "ok") {
          notifications = [];
          notificationCount = 0;
          updateNotificationBadge();
          document.getElementById("notificationPopup").classList.add("hidden");
        }
      })
      .catch(error => console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error));
    });

    function updateOrderTable(orders) {
      const buyTableBody = document.getElementById("buy-table-body");
      const sellTableBody = document.getElementById("sell-table-body");
      buyTableBody.innerHTML = "";
      sellTableBody.innerHTML = "";
      orders.forEach(order => {
        const row = document.createElement("tr");
        const traderCell = document.createElement("td");
        traderCell.textContent = order.trader;
        row.appendChild(traderCell);
        const priceCell = document.createElement("td");
        priceCell.textContent = order.price;
        row.appendChild(priceCell);
        const amountCell = document.createElement("td");
        amountCell.textContent = order.amount;
        row.appendChild(amountCell);
        const actionCell = document.createElement("td");
        const actionButton = document.createElement("button");
        actionButton.textContent = order.type === "buy" ? "Buy" : "Sell";
        actionButton.onclick = () => openModal(order);
        actionCell.appendChild(actionButton);
        row.appendChild(actionCell);
        if (order.type === "buy") {
          buyTableBody.appendChild(row);
        } else if (order.type === "sell") {
          sellTableBody.appendChild(row);
        }
      });
    }

    document.getElementById("buy-tab-btn").addEventListener("click", function() {
      currentTab = "buy";
      document.getElementById("buy-table").classList.remove("hidden");
      document.getElementById("sell-table").classList.add("hidden");
    });
    document.getElementById("sell-tab-btn").addEventListener("click", function() {
      currentTab = "sell";
      document.getElementById("sell-table").classList.remove("hidden");
      document.getElementById("buy-table").classList.add("hidden");
    });

    function openModal(order) {
      document.getElementById("modal-price").textContent = order.price;
      document.getElementById("modal-amount").textContent = order.amount;
      document.getElementById("modal-balance").textContent = document.getElementById("forevers-balance").textContent;
      document.getElementById("order-modal").style.display = "block";
      document.getElementById("confirm-order").onclick = function() {
        const quantity = document.getElementById("quantity").value;
        order.amount = quantity;
        confirmOrders([order]);
      };
      document.getElementById("close-modal").onclick = function() {
        document.getElementById("order-modal").style.display = "none";
      };
    }

    async function confirmOrders(ordersArray) {
      const userId = localStorage.getItem("user_id");
      const userBalance = document.getElementById("forevers-balance").textContent;
      const ordersData = ordersArray.map(order => ({
        order_id: order.order_id,
        type: order.type,
        price: order.price,
        amount: order.amount,
        userBalance: userBalance
      }));
      const payload = { orders: ordersData, user_id: userId };
      try {
        const response = await fetch("http://localhost:5000/api/execute_order", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: ${response.statusText} - ${errorText}`);
        }
        const responseData = await response.json();
        if (responseData.status === "success") {
          console.log("‚úÖ –û—Ä–¥–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
          const balanceResponse = await fetch(`http://localhost:5000/api/get_balance?user_id=${userId}`, { method: 'GET' });
          if (!balanceResponse.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å');
          const balanceData = await balanceResponse.json();
          if (balanceData.status === "success") {
            document.getElementById("amount-balance").textContent = balanceData.amount;
            document.getElementById("forevers-balance").textContent = balanceData.forevers;
            console.log("üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω!");
          } else {
            console.warn("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å:", balanceData.message);
          }
          document.getElementById("buy-forevers-modal").style.display = "none";
          isBestMatchActive = false;
        } else {
          throw new Error(responseData.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤");
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤:", error.message);
        alert("–û—à–∏–±–∫–∞: " + error.message);
      }
    }

    function login() {
      const email = document.getElementById("email").value;
      const password = document.getElementById("password").value;
      fetch("http://localhost:5000/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "success") {
          localStorage.setItem("user_id", data.user_id);
          document.getElementById("auth-section").classList.add("hidden");
          document.getElementById("orders-section").classList.remove("hidden");
          document.getElementById("forevers-balance").textContent = data.forevers;
          document.getElementById("amount-balance").textContent = data.amount;
          connectSocket();
        } else {
          alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
        }
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      });
    }

    function register() {
      const email = document.getElementById("email").value;
      const fullname = document.getElementById("fullname").value;
      const password = document.getElementById("password").value;
      fetch("http://localhost:5000/api/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, fullname, password })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "success") {
          localStorage.setItem("user_id", data.user_id);
          document.getElementById("auth-section").classList.add("hidden");
          document.getElementById("orders-section").classList.remove("hidden");
          document.getElementById("forevers-balance").textContent = data.forevers;
          document.getElementById("amount-balance").textContent = data.amount;
        } else {
          alert("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
        }
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      });
    }

    document.getElementById("create-order-btn").addEventListener("click", function() {
      document.getElementById("trader-name").value = localStorage.getItem("user_id");
      document.getElementById("create-order-modal").style.display = "block";
    });

    document.getElementById("close-create-modal").addEventListener("click", function() {
      document.getElementById("create-order-modal").style.display = "none";
    });

    document.getElementById("submit-order").addEventListener("click", async function() {
    const userId = localStorage.getItem("user_id");
    const orderType = document.getElementById("order-type").value;

    if (!orderType) {
      alert("Please select a valid order type.");
      return;
    }

    try {
      // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è full_name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResponse = await fetch(`http://localhost:5000/api/users/${userId}`);
      const userData = await userResponse.json();
      if (!userResponse.ok) {
        throw new Error(userData.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }

      const orderData = {
        trader_name: userData.full_name,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name –≤–º–µ—Å—Ç–æ userId
        type: orderType,
        amount: document.getElementById("order-quantity").value,
        price: document.getElementById("order-price").value,
        user_id: userId
      };

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞
      const response = await fetch("http://localhost:5000/api/add_order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderData)
      });

      const data = await response.json();

      if (data.status === "success") {
        alert("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
        document.getElementById("create-order-modal").style.display = "none";
      } else {
        alert("–û—à–∏–±–∫–∞: " + data.message);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:", error);
      alert("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
    }
  });

    document.getElementById("cancel-order-btn").addEventListener("click", async function() {
      const userId = localStorage.getItem("user_id");
      try {
        const cancelResponse = await fetch("http://localhost:5000/api/cancel_order", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ user_id: userId })
        });
        const cancelData = await cancelResponse.json();
        if (cancelData.status === "success") {
          alert("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!");
        } else {
          alert("–û—à–∏–±–∫–∞: " + cancelData.message);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞:", error);
        alert("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
      }
    });

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ Best Match
    document.getElementById("find-orders-btn").addEventListener("click", () => {
      isBestMatchActive = true;
      findBestMatchOrders();
    });

    function findBestMatchOrders() {
      const userId = localStorage.getItem("user_id");
      const quantity = document.getElementById("find-amount").value;
      if (!quantity || quantity <= 0) {
        alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ forevers");
        return;
      }
      fetch("http://localhost:5000/api/find_best_orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ type: currentTab, quantity: quantity, user_id: userId })
      })
      .then(response => response.json())
      .then(data => {
        bestMatchResponse = data;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ Best Match
        document.getElementById("best-match-container").classList.remove("hidden");
        renderBestMatch(data);
      })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤:", error);
        document.getElementById("best-match-container").innerHTML = "<p>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤.</p>";
      });
    }

    function renderBestMatch(data) {
      const container = document.getElementById("best-match-container");
      container.innerHTML = "";
      if (data.error) {
        container.innerHTML = `<p>${data.error}. –î–æ—Å—Ç—É–ø–Ω–æ: ${data.available}</p>`;
        return;
      }
      let headerText = currentTab === "buy" 
        ? `–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${data.average_price}. –û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${data.total_to_pay}` 
        : `–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${data.average_price}. –û–±—â–∞—è —Å—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: ${data.total_to_receive}`;
      const infoDiv = document.createElement("div");
      infoDiv.className = "header";
      infoDiv.style.marginBottom = "5px";
      infoDiv.textContent = headerText;
      container.appendChild(infoDiv);
      const table = document.createElement("table");
      table.style.width = "100%";
      table.style.borderCollapse = "collapse";
      const thead = document.createElement("thead");
      const headerRow = document.createElement("tr");
      ["Trader", "Price", "Amount", "Action"].forEach(text => {
        const th = document.createElement("th");
        th.textContent = text;
        th.style.padding = "8px";
        th.style.border = "1px solid #ccc";
        th.style.backgroundColor = "#f2f2f2";
        headerRow.appendChild(th);
      });
      thead.appendChild(headerRow);
      table.appendChild(thead);
      const tbody = document.createElement("tbody");
      data.orders.forEach(order => {
        const row = document.createElement("tr");
        const traderCell = document.createElement("td");
        traderCell.textContent = order.trader;
        traderCell.style.padding = "8px";
        traderCell.style.border = "1px solid #ccc";
        row.appendChild(traderCell);
        const priceCell = document.createElement("td");
        priceCell.textContent = order.price;
        priceCell.style.padding = "8px";
        priceCell.style.border = "1px solid #ccc";
        row.appendChild(priceCell);
        const amountCell = document.createElement("td");
        amountCell.textContent = order.amount;
        amountCell.style.padding = "8px";
        amountCell.style.border = "1px solid #ccc";
        row.appendChild(amountCell);
        const actionCell = document.createElement("td");
        actionCell.style.padding = "8px";
        actionCell.style.border = "1px solid #ccc";
        const actionButton = document.createElement("button");
        actionButton.textContent = currentTab === "buy" ? "Buy" : "Sell";
        actionButton.onclick = () => openModal(order);
        actionCell.appendChild(actionButton);
        row.appendChild(actionCell);
        tbody.appendChild(row);
      });
      table.appendChild(tbody);
      container.appendChild(table);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Reset Best Match
    document.getElementById("reset-orders-btn").addEventListener("click", () => {
      fetch("http://localhost:5000/api/reset_best_matches", {
        method: "POST",
        headers: { "Content-Type": "application/json" }
      })
      .then(response => response.json())
      .then(data => {
        bestMatchResponse = data;
        const container = document.getElementById("best-match-container");
        container.innerHTML = "";
        container.classList.add("hidden");
        isBestMatchActive = false;
      })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ Best Matches:", error);
      });
    });

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Buy Forevers
    document.getElementById("buy-forevers-btn").addEventListener("click", openBuyForeversModal);

    function openBuyForeversModal() {
      if (!bestMatchResponse || !bestMatchResponse.orders || bestMatchResponse.orders.length === 0) {
        alert("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.");
        return;
      }
      const container = document.getElementById("buy-forevers-content");
      let html = `<div class="header">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ Forevers</div>`;
      html += `<div class="order-list">`;
      bestMatchResponse.orders.forEach(order => {
        html += `<div class="order-item">
                    <span class="trader">${order.trader}</span>
                    <span class="price">${order.price}</span>
                    <span class="amount">${order.amount}</span>
                 </div>`;
      });
      html += `</div>`;
      const totalText = currentTab === "buy" ? `–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${bestMatchResponse.total_to_pay}` : `–ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: ${bestMatchResponse.total_to_receive}`;
      html += `<p>${totalText}</p>`;
      container.innerHTML = html;
      document.getElementById("buy-forevers-modal").style.display = "block";
    }

    document.getElementById("close-buy-forevers-modal").addEventListener("click", function() {
      document.getElementById("buy-forevers-modal").style.display = "none";
    });

    document.getElementById("confirm-buy-forevers").addEventListener("click", async function() {
      const userId = localStorage.getItem("user_id");
      if (!userId) {
        alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.");
        return;
      }
      const userBalance = document.getElementById("forevers-balance").textContent;
      const ordersData = bestMatchResponse.orders.map(order => ({
        order_id: order.order_id,
        type: currentTab === "buy" ? "buy" : "sell",
        price: order.price,
        amount: order.amount,
        userBalance: userBalance
      }));
      const payload = { orders: ordersData, user_id: userId };
      try {
        const response = await fetch("http://localhost:5000/api/execute_order", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });
        const data = await response.json();
        if (data.status === "success") {
          alert("–ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
          document.getElementById("buy-forevers-modal").style.display = "none";
          isBestMatchActive = false;
        } else {
          alert("–û—à–∏–±–∫–∞: " + data.message);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏:", error);
        alert("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
      }
    });
  </script>
</body>
</html>
